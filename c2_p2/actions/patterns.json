{
    "patterns": [
      {
        "name": "UX Acceptance Criteria",
        "context": "Consider that during the development of a project, the following User Story is written: As a user, I want to see all my investments in one screen. Still, consider that, this User Story has a particular UX requirement that should be evidenced: profits should be shown in green color. One way emphasize one requirement in US is add it as an acceptance criteria.\n\nIn many projects, UX information, which is essential to fulfill some software feature, is not spotlighted in the US, so the developers, do not allocate the needed time and effort to its implementation/coding or spend a long time searching for them.",
        "application": "Add the User Story acceptance criteria related to UX requirements that are specific to that feature.\n\nUX information of the User Story is included, which might have or not the assistance of a UX expert, during the elaboration of acceptance criteria which additionally highlight the importance of this UX information.",
        "example": "Example:",
        "consequences": "A positive consequence is that the navigational distance between the User Story and the UX information is Zero.\n\n Therefore, there is no steps to be done for accessing the UX information from UX. Besides this arrangement of UX information helps to have a better evaluation of the User Story result so that it fits the acceptance criteria. However, a possible drawback happens if there is a large amount of UX information added in the US, making it lose the property of being a small piece of work, as now it may be overloaded with too much information.",
        "relatedPatterns": "When the implementation of UX information demands an extra effort and it is not the core of the US, it can be defined on UX Tasks. If a UX Concer demands more work and it is related to several USs, it might be defined separately as an element at the same level of the US."
      },
      {
        "name": "UX Tasks",
        "context": "Consider the US: “As a user I want to see all my investments in one screen.” Taking into account that this User Story has UX work related to it, some time and effort should be allocated to accomplish such UX work so that it can be done appropriately in this way.\n\nUser Stories contain a list of requirements that are divided into User Story tasks to allow more fine-grained control of what should be executed by the team. All requirements have to be reflected in the User Story tasks to avoid missing details and planning the time spent on their implementation.",
        "application": "Define User Story tasks to represent activities that need to be performed to implement the UX requirements.\n\nIt is proposed the creation of a specific UX task when there is significant work related to the UX requirements. This UX task should reflect the UX requirements that require a specific time and effort to be implemented. This process brings UX closer to actual software development since the tasks define concrete actions to achieve the UX requirements.  A UX task can be created like a standard task in the US, but it should be created with the UX expert and categorized differently to emphasize that it is related to the UX, which might require team members with a more specific set of skills.",
        "example": "Example:",
        "consequences": "Some positive consequences are that the navigational distance between tasks and UX information becomes Zero. Consequently, the developer can easily know where to find it. Besides, by defining a UX task, the UX work will be explicitly defined, making it easy to see the allocation of time and effort needed for it.\n\nA negative consequence is that if this pattern is used for small and simple works, the granular tasks might result in extra effort for managing such small activities.",
        "relatedPatterns": "When there are more general and abstract UX requirements, it is recommended to Include UX in the Acceptance Criteria. If the UX requirement related to that User Story demands more work and is also related to other USs, it might be defined separately at the same level as the User Story as a UX Concern. UX Specific Repository can help to manage the information and artifacts used or generated by the UX Task execution."
      },
      {
        "name": "UX Concern",
        "context": "For example, consider that a web page template should be designed to be used as a reference for the user interface of several USs. This activity related to UX does not belong to any specific US, and the effort required for its implementation is similar or even more extensive than other USs. Moreover, this activity might be broke into smaller tasks to be planned and organized.\n\nA complex interface menu and UX research activities are other instances of larger UX activities that focs on non-functional characteristics needed by the software rather than something related to some specific US. This work has its own goals; it is essential to the project; and, due to its complexity, it might demand significant effort.",
        "application": "Define a type of element in the same hierarchy level of the USs, called UX Concern, that can be planned, estimated, and prioritized independently.\n\nThe UX Concern represents a UX activity that requires a more significant effort, has a complexity level higher than usual, and that is orthogonal to other functionalities represented in the USs.  By putting the UX Concern in the same level as a US, it is possible to plan, estimate and prioritize this work independently.\n\nA UX Concern represents a concept that is different from a US, since a User Story conceptually represents someone's desire for a new capability, while UX Concern represents a UX activity that impacts the project transversely and must be done independently. The UX Concern should be managed, planned, and estimated independently by the professional responsible for the UX and should be handled in the same importance as a User Story by the team.",
        "example": "Example:",
        "consequences": "A positive consequence is that the importance of the UX work is spotlighted. Additionally, the team will be able to handle it independently from other USs, consistently with its transversal nature.\n\nOne negative consequence is that creating more structures containing UX Work at the User Story level (i.e. not with the same purpose of a US) will generate more links between artifacts. Consequently, the navigational distance to achieve the UX information can be increased. Besides, by identifying and creating a concern, the UX work is assigned to UX experts, and consequently, the other agile team members may end up not being involved in the work and not understand the decisions made in that UX work.",
        "relatedPatterns": "After the creation of a US, it is possible to find UX information in the UX Acceptance Criteria. However, sometimes this UX information can be more general than the User Story scope, which might be a scenario where a UX Concern can be extracted from it. Another situation could happen when there is general UX information stored in a UX Central Repository, and this information demands a UX work that reaches several functionalities orthogonality. Also, in these cases, the creation of a UX Concern can help."
      },
      {
        "name": "UX Central Repository",
        "context": "Usually, all User Stories attached to a particular Epic should follow the same UX models and recommendations. For example, if a specific interface pattern that includes a certain button's usage must be followed, this interface pattern must be replicated in all the User Story associated with the respective Epic. However, replicating such information in all User Stories can generate duplication and might result in inconsistencies if modified. That happens because the modification is not applied automatically in all the User Stories that refer to the interface pattern.\n\nIn short, during the development of the USs, essential UX information common to several User Stories can appear, and storing this information in each of them can generate information duplication and inconsistencies.",
        "application": "Create a central repository to store the common UX information presented in different User Stories and create a link between the repository and those USs.\n\nCreating a central UX repository is the solution to the duplication and inconsistency problem of having common UX information in several USs. This repository aims to centralize in one single point the same UX information related to several USs. To support this pattern, the tool should allow the addition of links on the US that points to the files in the Central UX Repository.  A wiki-based virtual tool is recommended. It typically contains multiple pages for the subjects or scope of the project. Developers can arrange the information in wiki pages according to the team's preferences.\n\nIt is recommended that a team's member responsible for UX work create and manage this repository. In each information updating, all the team members should be notified.\n\nBesides creating the central UX repository, linking the User Stories and that repository should establish their relationship to keep a minimal navigational distance effort.",
        "example": "Example:",
        "consequences": "The positive consequence of this pattern application is that the navigational distance will always be short due to the linking created between the User Story and the repository. Moreover, using the UX information available from the repository to different User Stories avoids UX information duplication and inconsistency.\n\nOn the other hand, the negative consequence is that another virtual tool is used as a repository which can increase the navigational distance.",
        "relatedPatterns": "When the UX information is more related to one specific User Story is recommended to keep it in the UX Acceptance Criteria. However, whether they become general and is related to more than one US, the UX information should be stored and centralized in the Central UX Repository. Furthermore, in cases that UX artifacts are created from tasks and these artifacts are particular to USs, the Central UX Repository may not be the best place to store it. In turn, it is recommended to use a UX Specific Repository."
      },
      {
        "name": "UX Specific Repository",
        "context": "As developers perform their tasks, artifacts and critical information come out, which result in need of creating a place to store the task outcomes.\n\nTask results produce different artifacts useful for UX work, as templates, color schemes or interface prototypes. Unfortunately, all the UX information and artifacts related to it need to be stored, and due to the nature of being minimal, it is not recommended to store the task results in a single US.",
        "application": "Create an area for each Epic Story to hold the artifacts and UX information produced as outcomes of User Stories and tasks.\n\nA specific repository for the Epic should be created from which the artifacts and the UX information produced as a result of the tasks will be stored. This repository will be standard place for the developers to find easily artifacts and UX information that are specific to a US.\n\nThis repository can be elaborated in a wiki-based structure. A connection between the User Stories and the repository is demanded to keep a short navigation distance and consequently, a low effort to access the information in the repository from the US.",
        "example": "Example:",
        "consequences": "Positive consequences are keeping the navigational distance between the User Story and the artifacts short and always the same and guaranteeing that the artifacts are available in a safe and specific place. Besides, by applying this pattern, the team can add more information to the User Story(i.e. by linking to the repository) while keeping the User Story minimal.\n\nA negative consequence concerns adding a new tool to handle the artifacts, which can impose effort on the UX information access and even increase the navigational distance.",
        "relatedPatterns": "When UX information is more generic and can be used by many USs, the better solution is to hold it in a UX Central Repository. On the other hand, UX Specific Repository is recommended when UX information comes from information and artifacts that are outcomes of a specific User Story and has no connections to the others."
      }
    ]
  }